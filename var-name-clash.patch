--- spdlog-1.12/include/spdlog/fmt/bundled/format.h~	2016-08-26 14:39:00.000000000 +0200
+++ spdlog-1.12/include/spdlog/fmt/bundled/format.h	2020-06-09 22:31:27.877890734 +0200
@@ -2195,29 +2195,29 @@
         typedef typename BasicWriter<Char>::CharPtr CharPtr;
         Char fill = internal::CharTraits<Char>::cast(spec_.fill());
         CharPtr out = CharPtr();
-        const unsigned CHAR_WIDTH = 1;
-        if (spec_.width_ > CHAR_WIDTH)
+        const unsigned _SPD_CHAR_WIDTH = 1;
+        if (spec_.width_ > _SPD_CHAR_WIDTH)
         {
             out = writer_.grow_buffer(spec_.width_);
             if (spec_.align_ == ALIGN_RIGHT)
             {
-                std::uninitialized_fill_n(out, spec_.width_ - CHAR_WIDTH, fill);
-                out += spec_.width_ - CHAR_WIDTH;
+                std::uninitialized_fill_n(out, spec_.width_ - _SPD_CHAR_WIDTH, fill);
+                out += spec_.width_ - _SPD_CHAR_WIDTH;
             }
             else if (spec_.align_ == ALIGN_CENTER)
             {
                 out = writer_.fill_padding(out, spec_.width_,
-                                           internal::const_check(CHAR_WIDTH), fill);
+                                           internal::const_check(_SPD_CHAR_WIDTH), fill);
             }
             else
             {
-                std::uninitialized_fill_n(out + CHAR_WIDTH,
-                                          spec_.width_ - CHAR_WIDTH, fill);
+                std::uninitialized_fill_n(out + _SPD_CHAR_WIDTH,
+                                          spec_.width_ - _SPD_CHAR_WIDTH, fill);
             }
         }
         else
         {
-            out = writer_.grow_buffer(CHAR_WIDTH);
+            out = writer_.grow_buffer(_SPD_CHAR_WIDTH);
         }
         *out = internal::CharTraits<Char>::cast(value);
     }
